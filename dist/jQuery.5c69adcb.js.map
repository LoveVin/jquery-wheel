{"version":3,"sources":["jQuery.js"],"names":["window","$","jQuery","selectorOrArray","elements","document","querySelectorAll","Array","api","Object","create","prototype","assign","oldApi","fn","constructor","addClass","className","i","length","classList","add","find","selector","array","concat","from","end","each","call","parent","node","indexOf","parentNode","push","children","print","console","log"],"mappings":"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","file":"jQuery.5c69adcb.js","sourceRoot":"..\\src","sourcesContent":["window.$ = window.jQuery = function(selectorOrArray){\r\n    let elements;\r\n    if(typeof(selectorOrArray) === 'string'){\r\n        elements = document.querySelectorAll(selectorOrArray);\r\n    }\r\n    else if(selectorOrArray instanceof Array){\r\n        elements = selectorOrArray;\r\n    }\r\n    /*const api = {\r\n        addClass(className){\r\n            for(let i=0; i<elements.length; i++){\r\n                elements[i].classList.add(className); \r\n            }\r\n            //return null;\r\n            //return api;\r\n            return this;\r\n        }\r\n    }\r\n    return api;*/\r\n    const api = this.Object.create(jQuery.prototype);//创造一个对象，这个对象的__proto__为jQuery.prototype\r\n    /*return {\r\n        elements: elements,\r\n        oldApi: selectorOrArray.oldApi\r\n    }*/\r\n    /*api.elements = elements;\r\n    api.oldApi = selectorOrArray.oldApi;*/\r\n    Object.assign(api, {\r\n        elements: elements,//为了让原型中访问到elements\r\n        oldApi: selectorOrArray.oldApi\r\n    })//将后面对象的属性一一复制给前面的对象\r\n    return api;\r\n}\r\n/*window.jQuery = window.$;*/\r\n\r\njQuery.fn = jQuery.prototype = {\r\n    constructor:jQuery,\r\n    jQuery: true,\r\n    addClass(className){\r\n        for(let i=0; i<this.elements.length; i++){\r\n            this.elements[i].classList.add(className); \r\n        }\r\n        //return api;\r\n        return this;\r\n    },\r\n    find(selector){\r\n        let array = [];\r\n        for(let i=0; i < this.elements.length; i++){\r\n            array = array.concat(Array.from(this.elements[i].querySelectorAll(selector)));\r\n        }\r\n        /*elements = childArray; 不能这样返回，因为返回的对象是同一个对象，当elements被修改时，\r\n        之前获得该api对象里面的elements也会被修改*/\r\n        array.oldApi = this;/*要换api了，记录之前的Api,Array是对象，对象可以加属性*/\r\n        /*const newApi = jQuery(array);\r\n        return newApi;*/\r\n        return jQuery(array);\r\n    },\r\n    end(){\r\n        return this.oldApi;\r\n    },/*返回上一层api对象 */\r\n    each(fn){\r\n        for(let i=0; i < this.elements.length; i++){\r\n            fn.call(null, this.elements[i], i);\r\n        }\r\n        return this;\r\n    },\r\n    parent(){\r\n        const array = [];\r\n        this.each((node)=>{\r\n            /*if(array.indexOf(node.parentNode) >= 0)*/\r\n            if(array.indexOf(node.parentNode) === -1){\r\n                array.push(node.parentNode);\r\n            }\r\n        })\r\n        return jQuery(array);\r\n    },\r\n    children(){\r\n        const array = [];\r\n        this.each((node)=>{\r\n            array.push(...node.children);/*...是JS中的展开操作符，将数组每一项展开push*/\r\n        })\r\n        return jQuery(array);\r\n    },\r\n    print(){\r\n        console.log(this.elements);\r\n    }\r\n}"]}